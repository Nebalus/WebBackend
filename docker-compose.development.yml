name: "testapi-development"
services:

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
      target: development
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./public:/var/www/public:ro
    depends_on:
      - php-fpm
    networks:
      - public-net

  phpmyadmin:
    image: phpmyadmin
    container_name: phpmyadmin
    ports:
      - '8080:80'
    environment:
      - PMA_HOST=mysql
    depends_on:
      - mysql
    networks:
      - private-net
      - public-net

  # INTERN PORT: 9000
  php-fpm:
    build:
      context: .
      dockerfile: docker/php-fpm/Dockerfile
      target: development
    container_name: api
    user: '1001:1001' # Default User ID
    volumes:
      - ./:/var/www:rw
    environment:
      APP_ENV: "development"
      ERROR_LOGLEVEL: "Warning"
      JWT_SECRET: "553hGCpuffhO0274GTzui1oGsddasSP53"
      JWT_NORMAL_EXPIRATION_TIME: 86400
      JWT_EXTENDED_EXPIRATION_TIME: 604800
      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      MYSQL_HOST: "mysql"
      MYSQL_PORT: "3306"
      MYSQL_DATABASE: "main"
      MYSQL_USER: "admin"
      MYSQL_PASSWORD: "12345"
    depends_on:
      - mysql
      - redis
    networks:
      - public-net
      - private-net

  # INTERN PORT: 3306
  mysql:
    build:
      context: .
      dockerfile: docker/mysql/Dockerfile
      target: base
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "12345"
      MYSQL_DATABASE: "main"
      MYSQL_USER: "admin"
      MYSQL_PASSWORD: "12345"
    volumes:
      - /var/lib/mysql
    networks:
      - private-net

  redis:
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
      target: base
    container_name: redis
    environment:
      REDIS_PASSWORD: 1234
    command: [ "redis-server", "--requirepass", "$$REDIS_PASSWORD" ]
    networks:
      - private-net

  prometheus:
    build:
      context: .
      dockerfile: docker/prometheus/Dockerfile
      target: base
    container_name: prometheus
    ports:
      - '9393:9090'

  grafana:
    build:
      context: .
      dockerfile: docker/grafana/Dockerfile
      target: base
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3031:3000'

networks:
  public-net:
    name: public-net
  private-net:
    name: private-net
